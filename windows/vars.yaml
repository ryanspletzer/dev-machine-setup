# vars.yml
# Externalized variables for DSC 3.0 setup

# Windows Features to enable
windows_optional_features:
  # Required for WSL 2
  - VirtualMachinePlatform
  # Required for both WSL 1 and 2
  - Microsoft-Windows-Subsystem-Linux
  # Only enable if you need these
  # Only works with the proper virtualization support in the processor, enabled in BIOS/UEFI
  # - Microsoft-Hyper-V
  # Provides support for working with Windows containers
  # - Containers

# Chocolatey packages to install
# You may wonder why we have an explicit "name" key here instead of a simple array of package names...
# name is required input.
# But also _sometimes you_ want to override install parameters -- ex. see Git below.
# You may want to allow for prerelease versions of packages, in which case you can set prerelease: true
choco_packages:
  - name: 1password
  # - name: adoptopenjdk
  # - name: awscli
  # - name: awssamcli
  # - name: azure-cli
  # - name: azure-data-studio
  # - name: azure-functions-core-tools
  # - name: bicep
  # - name: cascadiacode
  # - name: citrix-workspace
  # - name: docker
  # - name: dotnet-sdk
  # # dotnetcore-sdk is deprecated, use dotnet-sdk instead
  # # This is only for .NET Core versions 3 and lower
  # # - name: dotnetcore-sdk
  # - name: dotnetfx
  # - name: drawio
  # - name: ffmpeg
  # - name: fiddler
  # - name: firefox
  # - name: gh
  # - name: git
  #   parameters: /WindowsTerminal /NoShellIntegration
  # - name: gnupg
  # - name: go
  # # May have a warning about not being signed...
  # # The Chrome setup process is weird.
  # # https://community.chocolatey.org/packages/GoogleChrome
  # - name: googlechrome
  # - name: ilspy
  # - name: jq
  # - name: maven
  # - name: microsoftazurestorageexplorer
  # - name: ngrok
  # - name: nodejs
  # - name: notepadplusplus
  # - name: office365business
  # - name: oh-my-posh
  # - name: packer
  # - name: python
  # - name: pwsh
  # - name: qemu
  # - name: ruff
  # - name: rsat
  # - name: rustup.install
  # - name: serverless
  # - name: servicebusexplorer
  # - name: slack
  # - name: sql-server-management-studio
  # - name: tailscale
  # - name: terraform
  # - name: uv
  # - name: vault
  # - name: visualstudio2022enterprise
  # - name: visualstudiocode
  # - name: windows-sdk-10-version-2004-all
  # - name: zoom
  # - name: zulu

# PowerShell modules to install via PSResourceGet in PowerShell (pwsh.exe)
# name is the only required key, but you can also specify version and prerelease (true|false) if desired.
psresources:
  - name: AWS.Tools.Common
  - name: Az.Accounts
  - name: Microsoft.Graph.Authentication
  - name: Pester
  - name: platyPS
  - name: posh-git
  - name: powershell-yaml
  - name: PowerShellBuild
  - name: psake
  - name: PSGraphQL
  - name: PSJsonWebToken
  - name: PSReadLine
  - name: PSScriptAnalyzer
  - name: PSTcpIp
  - name: Terminal-Icons

# PowerShell modules to install via Install-Module in Windows PowerShell (powershell.exe)
# Note: Only use this if you need to install modules in old Windows PowerShell (powershell.exe)
# This is not recommended for new setups, prefer using pwsh and PSResourceGet
psmodules:
  # - name: AWS.Tools.Common
  # - name: Az.Accounts
  # - name: Microsoft.Graph.Authentication
  # - name: Pester
  # - name: platyPS
  # - name: posh-git
  # - name: powershell-yaml
  # - name: PowerShellBuild
  # - name: psake
  # - name: PSGraphQL
  # - name: PSJsonWebToken
  # - name: PSReadLine
  # - name: PSScriptAnalyzer
  # - name: PSTcpIp
  # - name: Terminal-Icons

# Git configuration
git_user_email: ''  # REQUIRED: Set your email here or pass via command line with -e flag
git_user_name: ''  # Defaults to Windows local users full name (if set)

# Additional Git configurations (optional)
# These will be set as git config --global key value
git_additional_configs:
  # Examples (uncomment to use):
  commit.gpgsign: true
  init.defaultBranch: main
  gpg.program: /opt/homebrew/bin/gpg
  push.default: current
  push.autoSetupRemote: true
  user.signingKey: 787AEF0BAE232359

# Custom commands to execute after setup
custom_commands:
  - python -m pip install --user pipx
  - python -m pipx ensurepath
  # If you want more control over the WSL setup, you can use the following commands:
  # Update WSL
  # - wsl --update
  # Set WSL default version to 2
  # - wsl --set-default-version 2
  # Install a specific WSL distribution
  # - wsl --install -d Ubuntu-22.04
  # If you are fine with the WSL defaults Ubuntu distribution, you can use the command below.
  # Install WSL if not already installed with a default Ubuntu distribution
  # This also enables the relevant Windows features automatically if they aren't enabled already.
  - wsl --install
  # Additional custom commands can be added here
  # For example, to install a specific WSL distribution:
  # wsl --install -d Ubuntu-22.04
  # Add more git config options as needed

# Custom script path (optional)
# Provide the path to a custom script that will be executed at the end of the setup
# custom_script: "~/Downloads/custom_windows_script.ps1"
# custom_script_args: "-Option1 value1 -Option2 value2"
