# Windows Developer Machine Configuration using WinGet Configure
# This file is auto-generated from vars.yaml by setup.ps1
# Do not edit directly

$schema: https://aka.ms/configuration-schema-v2
properties:
  scope: machine
  locale: en-US
resources:
  # Windows Features
  - resource: Microsoft.Windows.Feature
    directives:
      description: Install Windows Feature - Microsoft-Windows-Subsystem-Linux
      allowPrerelease: true
    settings:
      featureName: Microsoft-Windows-Subsystem-Linux
      state: Enabled

  # Install Chocolatey Package Manager
  - resource: Microsoft.Windows.PowerShell
    id: install_chocolatey
    directives:
      description: Install Chocolatey
      allowPrerelease: true
    settings:
      executeAsPowershell: true
      executionPolicy: Bypass
      source: |
        if (-not (Get-Command -Name choco -ErrorAction SilentlyContinue)) {
          Write-Host "Installing Chocolatey..."
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          Invoke-Expression -Command ((New-Object -TypeName System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path", "User")
          Write-Host "Chocolatey installed successfully."
        } else {
          Write-Host "Chocolatey is already installed."
        }

  # Install PowerShell 7 (pwsh)
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    id: install_pwsh
    directives:
      description: Install PowerShell 7
      allowPrerelease: true
      dependsOn:
        - install_chocolatey
    settings:
      id: Microsoft.PowerShell
      source: winget
      ensure: Present

  # Install Chocolatey Packages
  - resource: Microsoft.Windows.PowerShell
    id: install_choco_packages
    directives:
      description: Install Developer Tools via Chocolatey
      allowPrerelease: true
      dependsOn:
        - install_chocolatey
    settings:
      executeAsPowershell: true
      executionPolicy: Bypass
      source: |
        # Function to install Chocolatey package if not already installed
        function Install-ChocoPackageIfNotInstalled {
            param(
                [string]$PackageName,
                [string]$Params = ""
            )

            if (-not (choco list --local-only --exact $PackageName | Select-String -Pattern "^$PackageName\s")) {
                Write-Host "Installing $PackageName..."
                if ($Params) {
                    choco install $PackageName -y --no-progress --params="$Params"
                } else {
                    choco install $PackageName -y --no-progress
                }
            } else {
                Write-Host "$PackageName is already installed."
            }
        }

        # Install Chocolatey packages
        $packages = @(
            @{ Name = "1password" },
            @{ Name = "git"; Params = "/WindowsTerminal /NoShellIntegration" },
            @{ Name = "vscode" },
            # ... other packages dynamically added from vars.yaml
        )

        # Install each package
        foreach ($package in $packages) {
            if ($package.Params) {
                Install-ChocoPackageIfNotInstalled -PackageName $package.Name -Params $package.Params
            } else {
                Install-ChocoPackageIfNotInstalled -PackageName $package.Name
            }
        }

  # Install PowerShell Modules
  - resource: Microsoft.Windows.PowerShell
    id: install_powershell_modules
    directives:
      description: Install PowerShell Modules
      allowPrerelease: true
      dependsOn:
        - install_pwsh
    settings:
      executeAsPowershell: true
      executionPolicy: Bypass
      source: |
        # Install PowerShell modules if not already installed
        $modules = @(
            "PSReadLine",
            "posh-git",
            # ... other modules dynamically added from vars.yaml
        )

        foreach ($module in $modules) {
            if (-not (Get-Module -ListAvailable -Name $module)) {
                Write-Host "Installing PowerShell module: $module..."
                Install-Module -Name $module -Force -AllowClobber -Scope AllUsers
            } else {
                Write-Host "PowerShell module $module is already installed."
            }
        }

  # Configure Git
  - resource: Microsoft.Windows.PowerShell
    id: configure_git
    directives:
      description: Configure Git
      allowPrerelease: true
      dependsOn:
        - install_choco_packages
    settings:
      executeAsPowershell: true
      executionPolicy: Bypass
      source: |
        # Set Git user email if provided
        if ($env:GIT_USER_EMAIL) {
          git config --global user.email $env:GIT_USER_EMAIL
        }

        # Set Git user name if provided
        if ($env:GIT_USER_NAME) {
          git config --global user.name $env:GIT_USER_NAME
        }
