# Windows Developer Machine Configuration using WinGet Configure
# Based on original vars.yaml content

# Schema for Windows Package Manager Configuration file
# Reference: https://learn.microsoft.com/en-us/windows/package-manager/configuration/create-configuration
$schema: https://aka.ms/configuration-schema-v2
properties:
  scope: machine
  locale: en-US

# Define resources to configure
resources:
  # Windows Features
  - resource: Microsoft.Windows.Feature
    directives:
      description: Install Windows Features
      allowPrerelease: true
    settings:
      featureName: Microsoft-Windows-Subsystem-Linux
      state: Enabled

  # Install Chocolatey Package Manager
  - resource: Microsoft.Windows.PowerShell
    id: install_chocolatey
    directives:
      description: Install Chocolatey
      allowPrerelease: true
    settings:
      executeAsPowershell: true
      executionPolicy: Bypass
      source: |
        if (-not (Get-Command -Name choco -ErrorAction SilentlyContinue)) {
          Write-Host "Installing Chocolatey..."
          Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          Invoke-Expression -Command ((New-Object -TypeName System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path", "User")
          Write-Host "Chocolatey installed successfully."
        } else {
          Write-Host "Chocolatey is already installed."
        }

  # Install PowerShell 7 (pwsh)
  - resource: Microsoft.WinGet.DSC/WinGetPackage
    id: install_pwsh
    directives:
      description: Install PowerShell 7
      allowPrerelease: true
      dependsOn:
        - install_chocolatey
    settings:
      id: Microsoft.PowerShell
      source: winget
      ensure: Present

  # Install Chocolatey Packages
  - resource: Microsoft.Windows.PowerShell
    id: install_choco_packages
    directives:
      description: Install Developer Tools via Chocolatey
      allowPrerelease: true
      dependsOn:
        - install_chocolatey
    settings:
      executeAsPowershell: true
      executionPolicy: Bypass
      source: |
        # Function to install Chocolatey package if not already installed
        function Install-ChocoPackageIfNotInstalled {
            param(
                [string]$PackageName,
                [string]$Params = ""
            )

            if (-not (choco list --local-only --exact $PackageName | Select-String -Pattern "^$PackageName\s")) {
                Write-Host "Installing $PackageName..."
                if ($Params) {
                    choco install $PackageName -y --no-progress --params="$Params"
                } else {
                    choco install $PackageName -y --no-progress
                }
            } else {
                Write-Host "$PackageName is already installed."
            }
        }

        # Install Chocolatey packages
        $packages = @(
            @{ Name = "1password" },
            @{ Name = "adoptopenjdk" },
            @{ Name = "awscli" },
            @{ Name = "awssamcli" },
            @{ Name = "azure-cli" },
            @{ Name = "azure-data-studio" },
            @{ Name = "azure-functions-core-tools" },
            @{ Name = "bicep" },
            @{ Name = "cascadiacode" },
            @{ Name = "citrix-workspace" },
            @{ Name = "docker" },
            @{ Name = "dotnet-sdk" },
            @{ Name = "dotnetcore-sdk" },
            @{ Name = "dotnetfx" },
            @{ Name = "drawio" },
            @{ Name = "ffmpeg" },
            @{ Name = "fiddler" },
            @{ Name = "firefox" },
            @{ Name = "gh" },
            @{ Name = "git"; Params = "/WindowsTerminal /NoShellIntegration" },
            @{ Name = "gnupg" },
            @{ Name = "go" },
            @{ Name = "googlechrome" },
            @{ Name = "ilspy" },
            @{ Name = "jq" },
            @{ Name = "maven" },
            @{ Name = "microsoftazurestorageexplorer" },
            @{ Name = "ngrok" },
            @{ Name = "nodejs" },
            @{ Name = "notepadplusplus" },
            @{ Name = "office365business" },
            @{ Name = "oh-my-posh" },
            @{ Name = "packer" },
            @{ Name = "python" },
            @{ Name = "pwsh" },
            @{ Name = "qemu" },
            @{ Name = "ruff" },
            @{ Name = "rsat" },
            @{ Name = "rustup.install" },
            @{ Name = "serverless" },
            @{ Name = "servicebusexplorer" },
            @{ Name = "slack" },
            @{ Name = "sql-server-management-studio" },
            @{ Name = "tailscale" },
            @{ Name = "terraform" },
            @{ Name = "uv" },
            @{ Name = "vault" },
            @{ Name = "visualstudio2022enterprise" },
            @{ Name = "visualstudiocode" },
            @{ Name = "windows-sdk-10-version-2004-all" },
            @{ Name = "zoom" },
            @{ Name = "zulu" }
        )

        # Install each package
        foreach ($package in $packages) {
            if ($package.Params) {
                Install-ChocoPackageIfNotInstalled -PackageName $package.Name -Params $package.Params
            } else {
                Install-ChocoPackageIfNotInstalled -PackageName $package.Name
            }
        }

  # Install PowerShell Modules
  - resource: Microsoft.Windows.PowerShell
    id: install_powershell_modules
    directives:
      description: Install PowerShell Modules
      allowPrerelease: true
      dependsOn:
        - install_pwsh
    settings:
      executeAsPowerShell7: true
      executionPolicy: Bypass
      source: |
        # Function to install PowerShell module if not already installed
        function Install-PSModuleIfNotInstalled {
            param(
                [string]$ModuleName
            )

            if (-not (Get-Module -Name $ModuleName -ListAvailable)) {
                Write-Host "Installing PowerShell module: $ModuleName..."
                Install-Module -Name $ModuleName -Force -Scope CurrentUser -SkipPublisherCheck
            } else {
                Write-Host "PowerShell module $ModuleName is already installed."
            }
        }

        # Trust PSGallery repository
        Set-PSRepository -Name PSGallery -InstallationPolicy Trusted

        # Install PowerShell modules
        $modules = @(
            "AWS.Tools.Common",
            "Az.Accounts",
            "Microsoft.Graph.Authentication",
            "Pester",
            "platyPS",
            "posh-git",
            "powershell-yaml",
            "PowerShellBuild",
            "psake",
            "PSGraphQL",
            "PSJsonWebToken",
            "PSReadLine",
            "PSScriptAnalyzer",
            "PSTcpIp",
            "Terminal-Icons"
        )

        # Install each module
        foreach ($module in $modules) {
            Install-PSModuleIfNotInstalled -ModuleName $module
        }

  # Git Configuration
  - resource: Microsoft.Windows.PowerShell
    id: configure_git
    directives:
      description: Configure Git
      allowPrerelease: true
      dependsOn:
        - install_choco_packages
    settings:
      executeAsPowershell: true
      executionPolicy: Bypass
      source: |
        # Configure Git
        git config --global init.defaultBranch main
        git config --global push.default current
        git config --global push.autoSetupRemote true
        git config --global core.autocrlf true

        # Check if Git email and username are provided via parameters
        $gitEmail = [Environment]::GetEnvironmentVariable("GIT_USER_EMAIL", "Process")
        $gitName = [Environment]::GetEnvironmentVariable("GIT_USER_NAME", "Process")

        if (-not [string]::IsNullOrEmpty($gitEmail)) {
            Write-Host "Setting Git email to: $gitEmail"
            git config --global user.email $gitEmail
        }

        if (-not [string]::IsNullOrEmpty($gitName)) {
            Write-Host "Setting Git name to: $gitName"
            git config --global user.name $gitName
        }

  # Additional Setup Tasks
  - resource: Microsoft.Windows.PowerShell
    id: additional_setup
    directives:
      description: Run Additional Setup Tasks
      allowPrerelease: true
      dependsOn:
        - install_powershell_modules
        - configure_git
    settings:
      executeAsPowershell: true
      executionPolicy: Bypass
      source: |
        # Install pipx
        Write-Host "Installing pipx..."
        python -m pip install --user pipx
        python -m pipx ensurepath

        # Install WSL without a distribution
        Write-Host "Installing WSL infrastructure..."
        wsl --install --no-distribution

        Write-Host "Setup completed successfully!"
