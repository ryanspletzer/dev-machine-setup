---
# Ansible playbook for macOS development machine setup
# Manages Homebrew packages, PowerShell modules, pipx modules, VS Code extensions, and Git configuration

- name: Setup development environment on macOS
  hosts: localhost
  connection: local
  gather_facts: yes
  # Define the become password at the play level so it's available to all tasks
  vars:
    ansible_become_pass: "{{ lookup('env', 'ANSIBLE_SUDO_PASS') }}"

  vars_files:
    - vars.yaml

  tasks:
    # Rosetta 2 installation (optional)
    - name: Check if system is Apple Silicon
      ansible.builtin.command:
        cmd: uname -m
      register: arch_check
      changed_when: false
      when: install_rosetta | bool
      tags:
        - system
        - rosetta

    - name: Check if Rosetta 2 is already installed
      ansible.builtin.command:
        cmd: /usr/bin/pgrep -q oahd
      register: rosetta_check
      ignore_errors: yes
      changed_when: false
      when:
        - install_rosetta | bool
        - arch_check.stdout == "arm64"
      tags:
        - system
        - rosetta

    - name: Install Rosetta 2 (with become_method=sudo)
      ansible.builtin.command:
        cmd: /usr/sbin/softwareupdate --install-rosetta --agree-to-license
      become: yes
      become_method: sudo
      when:
        - install_rosetta | bool
        - arch_check.stdout == "arm64"
        - rosetta_check.rc != 0
      register: rosetta_install
      changed_when: rosetta_install.rc == 0
      tags:
        - system
        - rosetta

    # Homebrew setup
    - name: Ensure Homebrew taps are added
      community.general.homebrew_tap:
        name: "{{ item }}"
        state: present
      loop: "{{ homebrew_taps }}"
      tags:
        - homebrew
        - taps

    - name: Ensure Homebrew casks are installed
      ansible.builtin.shell:
        cmd: "/opt/homebrew/bin/brew install --cask {{ item }}"
      environment:
        SUDO_ASKPASS: "{{ lookup('env', 'SUDO_ASKPASS') }}"
        HOMEBREW_SUDO_ASKPASS: "{{ lookup('env', 'SUDO_ASKPASS') }}"
      loop: "{{ homebrew_casks }}"
      register: brew_cask_result
      changed_when: "'already installed' not in brew_cask_result.stdout"
      tags:
        - homebrew
        - casks

    - name: Ensure Homebrew formulae are installed
      community.general.homebrew:
        name: "{{ item }}"
        state: present
        update_homebrew: yes
      loop: "{{ homebrew_formulae }}"
      tags:
        - homebrew
        - formulae

    # Add PowerShell to /etc/shells if it's not already there
    - name: Check if PowerShell is in /etc/shells
      ansible.builtin.command:
        cmd: grep -q "/usr/local/bin/pwsh" /etc/shells
      register: pwsh_in_shells
      changed_when: false
      failed_when: false
      tags:
        - powershell
        - shells

    - name: Add PowerShell to /etc/shells (with become_method=sudo)
      ansible.builtin.lineinfile:
        path: /etc/shells
        line: /usr/local/bin/pwsh
        state: present
      become: yes
      become_method: sudo
      when: pwsh_in_shells.rc != 0
      tags:
        - powershell
        - shells

    # PowerShell module setup
    - name: Ensure PowerShell modules are installed
      ansible.builtin.command:
        cmd: pwsh -Command "Install-Module -Name {{ item }} -Force -Scope CurrentUser"
      loop: "{{ powershell_modules }}"
      register: pwsh_install_result
      changed_when: "'is already installed' not in pwsh_install_result.stdout"
      tags:
        - powershell
        - modules

    - name: Update PowerShell help
      ansible.builtin.command:
        cmd: pwsh -Command "Update-Help -Force -ErrorAction SilentlyContinue"
      register: pwsh_help_result
      changed_when: pwsh_help_result.rc == 0
      ignore_errors: yes
      tags:
        - powershell
        - help

    # pipx module setup
    - name: Ensure pipx is available
      ansible.builtin.command:
        cmd: which pipx
      register: pipx_check
      ignore_errors: yes
      changed_when: false
      tags:
        - pipx

    - name: Ensure pipx modules are installed
      ansible.builtin.command:
        cmd: pipx install {{ item }}
      loop: "{{ pipx_modules }}"
      when: pipx_check.rc == 0
      register: pipx_install_result
      changed_when: "'already installed' not in pipx_install_result.stdout"
      tags:
        - pipx
        - modules

    # VS Code extension setup
    - name: Ensure VS Code extensions are installed
      ansible.builtin.command:
        cmd: code --install-extension {{ item }}
      loop: "{{ vscode_extensions }}"
      register: vscode_ext_result
      changed_when: "'already installed' not in vscode_ext_result.stdout"
      tags:
        - vscode
        - extensions

    # Git LFS setup
    - name: Ensure Git LFS is initialized
      ansible.builtin.command:
        cmd: git lfs install --system
      register: git_lfs_result
      changed_when: "'Already initialized' not in git_lfs_result.stdout"
      tags:
        - git
        - lfs

    # Git configuration
    - name: Configure Git user.name
      ansible.builtin.command:
        cmd: git config --global user.name "{{ git_user_name }}"
      register: git_name_result
      changed_when: git_name_result.rc == 0
      tags:
        - git
        - config

    - name: Configure Git user.email
      ansible.builtin.command:
        cmd: git config --global user.email "{{ git_user_email }}"
      when: git_user_email != ""
      register: git_email_result
      changed_when: git_email_result.rc == 0
      tags:
        - git
        - config

    # Additional Git configurations
    - name: Configure additional Git settings
      ansible.builtin.command:
        cmd: git config --global {{ item.key }} "{{ item.value }}"
      loop: "{{ git_additional_configs | default({}) | dict2items }}"
      register: git_config_result
      changed_when: git_config_result.rc == 0
      tags:
        - git
        - config

    # Custom macOS commands and preferences
    - name: Execute custom macOS commands
      ansible.builtin.shell:
        cmd: "{{ item }}"
      loop: "{{ custom_commands | default([]) }}"
      register: custom_command_result
      changed_when: custom_command_result.rc == 0
      ignore_errors: yes
      become: yes
      become_method: sudo
      tags:
        - macos
        - preferences

    # Execute custom script if defined
    - name: Check if custom script exists
      ansible.builtin.stat:
        path: "{{ custom_script | default('') }}"
      register: script_stat
      when: custom_script is defined and custom_script != ""
      tags:
        - custom
        - script

    - name: Make custom script executable
      ansible.builtin.file:
        path: "{{ custom_script }}"
        mode: '0755'
      when:
        - custom_script is defined and custom_script != ""
        - script_stat.stat.exists | bool
      tags:
        - custom
        - script

    - name: Execute custom script
      ansible.builtin.command:
        cmd: "{{ custom_script }} {{ custom_script_args | default('') }}"
      register: custom_script_result
      changed_when: custom_script_result.rc == 0
      when:
        - custom_script is defined and custom_script != ""
        - script_stat.stat.exists | bool
      tags:
        - custom
        - script

    # Notify user of completion
    - name: Setup complete
      ansible.builtin.debug:
        msg: "Development environment setup completed successfully!"
      tags:
        - always
