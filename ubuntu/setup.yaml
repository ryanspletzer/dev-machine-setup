---
# Ansible playbook for Ubuntu development machine setup
# Manages APT packages, Snap packages, PowerShell modules, pipx modules, VS Code extensions, and Git configuration

- name: Setup development environment on Ubuntu
  hosts: localhost
  connection: local
  gather_facts: yes
  # Define the become password at the play level so it's available to all tasks
  vars:
    ansible_become_pass: "{{ lookup('env', 'ANSIBLE_SUDO_PASS') }}"
    ansible_connection: local

  vars_files:
    - vars.yaml

  tasks:
    # System setup
    - name: Check WSL version (0=not WSL, 1=WSL1, 2=WSL2)
      ansible.builtin.shell: |
        # Check if we're in WSL at all
        if ! grep -q -i microsoft /proc/version && ! (uname -r | grep -q microsoft); then
          exit 0  # Not in WSL
        fi

        # We're in WSL, now determine version
        if grep -q -i "microsoft.*wsl2" /proc/version || (uname -r | grep -q "microsoft.*wsl2"); then
          exit 2  # WSL 2
        elif [ -f /proc/sys/kernel/osrelease ] && grep -q "microsoft" /proc/sys/kernel/osrelease; then
          exit 1  # WSL 1
        elif grep -q -i microsoft /proc/version || (uname -r | grep -q microsoft); then
          # Fallback: if we detect Microsoft but can't determine version, assume WSL 1
          exit 1  # WSL 1
        else
          exit 0  # Not in WSL (fallback)
        fi
      register: wsl_check
      ignore_errors: yes
      changed_when: false
      tags:
        - system
        - wsl

    - name: Set WSL facts
      ansible.builtin.set_fact:
        is_wsl: "{{ wsl_check.rc != 0 }}"
        wsl_version: "{{ wsl_check.rc }}"
        is_wsl1: "{{ wsl_check.rc == 1 }}"
        is_wsl2: "{{ wsl_check.rc == 2 }}"
      tags:
        - system
        - wsl

    # Get Debian architecture dynamically using dpkg
    - name: Get Debian architecture from dpkg
      ansible.builtin.command:
        cmd: dpkg --print-architecture
      register: dpkg_architecture
      changed_when: false
      tags:
        - system
        - architecture

    # Set the deb_architecture fact based on dpkg output
    - name: Set Debian architecture fact
      ansible.builtin.set_fact:
        deb_architecture: "{{ dpkg_architecture.stdout }}"
      tags:
        - system
        - architecture

    # Display detected architecture
    - name: Display detected architecture
      ansible.builtin.debug:
        msg:
          - "Detected system architecture: {{ ansible_architecture }}"
          - "Using Debian architecture: {{ deb_architecture }}"
      tags:
        - system
        - architecture

    # apt update
    - name: Update APT cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
      become: yes
      tags:
        - apt
        - update

    # apt upgrade
    - name: Upgrade all packages
      ansible.builtin.apt:
        upgrade: yes
      become: yes
      tags:
        - apt
        - upgrade

    # Install prerequisite APT packages
    - name: Install prerequisite APT packages
      ansible.builtin.apt:
        name: "{{ apt_packages_prereqs }}"
        state: present
      become: yes
      tags:
        - apt
        - prereqs
        - packages

    # Add external APT repositories using deb822 format
    - name: Add external APT repositories
      ansible.builtin.deb822_repository:
        name: "{{ item.name }}"
        signed_by: "{{ item.signed_by }}"
        uris: "{{ item.uris }}"
        suites: "{{ item.suites }}"
        components: "{{ item.components }}"
        architectures: "{{ item.architectures }}"
        state: present
      loop: "{{ external_apt_repositories }}"
      loop_control:
        label: "Adding repository: {{ item.name }}"
      when: item.architectures is not defined or item.architectures == deb_architecture
      become: yes
      tags:
        - apt
        - repositories

    # Add PPA APT repositories
    - name: Add PPA APT repositories
      ansible.builtin.apt_repository:
        repo: "{{ item }}"
        state: present
      loop: "{{ ppa_apt_repositories }}"
      loop_control:
        label: "Adding repository: {{ item }}"
      become: yes
      tags:
        - apt
        - repositories

    # Install APT packages
    - name: Install APT packages
      ansible.builtin.apt:
        name: "{{ apt_packages }}"
        state: present
      become: yes
      tags:
        - apt
        - packages

    # Snap packages (classic)
    - name: Install Snap packages (classic)
      community.general.snap:
        name: "{{ item.name }}"
        classic: yes
        state: present
      become: yes
      loop: "{{ snap_packages | selectattr('classic', 'defined') | selectattr('classic') | list }}"
      loop_control:
        label: "Installing classic snap: {{ item.name }}"
      tags:
        - snap
        - packages

    # Snap packages (regular)
    - name: Install Snap packages (regular)
      community.general.snap:
        name: "{{ item.name }}"
        state: present
      become: yes
      loop: "{{ snap_packages | rejectattr('classic', 'defined') | list }} + {{ snap_packages | selectattr('classic', 'defined') | rejectattr('classic') | list }}"
      loop_control:
        label: "Installing regular snap: {{ item.name }}"
      tags:
        - snap
        - packages

    # Docker setup
    - name: Install Docker
      block:
        - name: Install Docker packages
          ansible.builtin.apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present
          become: yes

        - name: Add user to docker group
          ansible.builtin.user:
            name: "{{ item }}"
            groups: docker
            append: yes
          loop: "{{ docker_users }}"
          become: yes
      when: install_docker | bool
      tags:
        - docker

    # PowerShell setup
    - name: Install PowerShell
      block:
        - name: Install PowerShell via apt
          ansible.builtin.apt:
            name: powershell
            state: present
          become: yes
      when: install_powershell | bool
      tags:
        - powershell
        - install

    # PowerShell modules
    - name: Install PowerShell modules
      ansible.builtin.command:
        cmd: pwsh -Command "Install-Module -Name {{ item }} -Force -Scope CurrentUser"
      loop: "{{ powershell_modules }}"
      register: pwsh_install_result
      changed_when: "'is already installed' not in pwsh_install_result.stdout"
      loop_control:
        label: "Installing PowerShell module: {{ item }}"
      when: install_powershell | bool
      tags:
        - powershell
        - modules

    # Node.js setup
    - name: Install Node.js using nvm
      block:
        - name: Download nvm install script
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/nvm-sh/nvm/v{{ nvm_version }}/install.sh
            dest: /tmp/nvm-install.sh
            mode: '0755'

        - name: Install nvm
          ansible.builtin.shell: |
            bash /tmp/nvm-install.sh
          args:
            creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"

        - name: Install Node.js using nvm
          ansible.builtin.shell: |
            export NVM_DIR="{{ ansible_env.HOME }}/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            nvm install {{ node_version }}
            nvm alias default {{ node_version }}
          args:
            executable: /bin/bash
      when: install_nvm | bool
      tags:
        - nodejs
        - nvm

    # Python setup with pyenv
    - name: Install Python using pyenv
      block:
        - name: Download pyenv installer
          ansible.builtin.get_url:
            url: https://pyenv.run
            dest: /tmp/pyenv-installer.sh
            mode: '0755'

        - name: Install pyenv
          ansible.builtin.shell: |
            bash /tmp/pyenv-installer.sh
          args:
            creates: "{{ ansible_env.HOME }}/.pyenv/bin/pyenv"

        - name: Add pyenv to .bashrc if not already present
          ansible.builtin.lineinfile:
            path: "{{ ansible_env.HOME }}/.bashrc"
            line: 'export PYENV_ROOT="$HOME/.pyenv"'
            state: present

        - name: Add pyenv PATH to .bashrc if not already present
          ansible.builtin.lineinfile:
            path: "{{ ansible_env.HOME }}/.bashrc"
            line: 'export PATH="$PYENV_ROOT/bin:$PATH"'
            state: present

        - name: Add pyenv init to .bashrc if not already present
          ansible.builtin.lineinfile:
            path: "{{ ansible_env.HOME }}/.bashrc"
            line: 'eval "$(pyenv init --path)"'
            state: present

        - name: Add pyenv init shell to .bashrc if not already present
          ansible.builtin.lineinfile:
            path: "{{ ansible_env.HOME }}/.bashrc"
            line: 'eval "$(pyenv init -)"'
            state: present

        - name: Install Python versions
          ansible.builtin.shell: |
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init --path)"
            eval "$(pyenv init -)"
            pyenv install {{ item }} -s
          loop: "{{ python_versions }}"
          args:
            executable: /bin/bash
          register: pyenv_install
          changed_when: pyenv_install.rc == 0
          failed_when: pyenv_install.rc != 0 and "already installed" not in pyenv_install.stderr

        - name: Set global Python version
          ansible.builtin.shell: |
            export PYENV_ROOT="$HOME/.pyenv"
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init --path)"
            eval "$(pyenv init -)"
            pyenv global {{ default_python_version }}
          args:
            executable: /bin/bash
      when: install_pyenv | bool
      tags:
        - python
        - pyenv

    # pipx setup
    - name: Install pipx
      ansible.builtin.apt:
        name: pipx
        state: present
      become: yes
      tags:
        - pipx
        - install

    - name: Install pipx modules
      ansible.builtin.shell: |
        pipx install {{ item }}
      loop: "{{ pipx_modules }}"
      register: pipx_install_result
      changed_when: "'already installed' not in pipx_install_result.stdout"
      loop_control:
        label: "Installing pipx module: {{ item }}"
      tags:
        - pipx
        - modules

    # Ruby setup with rbenv
    - name: Install Ruby using rbenv
      block:
        - name: Clone rbenv
          ansible.builtin.git:
            repo: https://github.com/rbenv/rbenv.git
            dest: "{{ ansible_env.HOME }}/.rbenv"
            version: master

        - name: Clone ruby-build
          ansible.builtin.git:
            repo: https://github.com/rbenv/ruby-build.git
            dest: "{{ ansible_env.HOME }}/.rbenv/plugins/ruby-build"
            version: master

        - name: Add rbenv to .bashrc if not already present
          ansible.builtin.lineinfile:
            path: "{{ ansible_env.HOME }}/.bashrc"
            line: 'export PATH="$HOME/.rbenv/bin:$PATH"'
            state: present

        - name: Add rbenv init to .bashrc if not already present
          ansible.builtin.lineinfile:
            path: "{{ ansible_env.HOME }}/.bashrc"
            line: 'eval "$(rbenv init -)"'
            state: present

        - name: Install Ruby version
          ansible.builtin.shell: |
            export PATH="$HOME/.rbenv/bin:$PATH"
            eval "$(rbenv init -)"
            rbenv install {{ ruby_version }} -s
          args:
            executable: /bin/bash
          register: rbenv_install
          changed_when: rbenv_install.rc == 0
          failed_when: rbenv_install.rc != 0 and "already installed" not in rbenv_install.stderr

        - name: Set global Ruby version
          ansible.builtin.shell: |
            export PATH="$HOME/.rbenv/bin:$PATH"
            eval "$(rbenv init -)"
            rbenv global {{ ruby_version }}
          args:
            executable: /bin/bash
      when: install_rbenv | bool
      tags:
        - ruby
        - rbenv

    # Go installation
    - name: Install Go
      block:
        - name: Download Go
          ansible.builtin.get_url:
            url: "https://go.dev/dl/go{{ go_version }}.linux-{{ deb_architecture }}.tar.gz"
            dest: "/tmp/go{{ go_version }}.linux-{{ deb_architecture }}.tar.gz"
          register: go_download

        - name: Remove existing Go installation if present
          ansible.builtin.file:
            path: /usr/local/go
            state: absent
          become: yes
          when: go_download.changed

        - name: Extract Go
          ansible.builtin.unarchive:
            src: "/tmp/go{{ go_version }}.linux-{{ deb_architecture }}.tar.gz"
            dest: /usr/local
            remote_src: yes
          become: yes
          when: go_download.changed

        - name: Add Go to PATH in .bashrc if not already present
          ansible.builtin.lineinfile:
            path: "{{ ansible_env.HOME }}/.bashrc"
            line: 'export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin'
            state: present
      when: install_go | bool
      tags:
        - go

    # Rust installation
    - name: Install Rust
      block:
        - name: Download rustup installer
          ansible.builtin.get_url:
            url: https://sh.rustup.rs
            dest: /tmp/rustup.sh
            mode: '0755'

        - name: Install Rust
          ansible.builtin.shell: |
            /tmp/rustup.sh -y
          args:
            creates: "{{ ansible_env.HOME }}/.cargo/bin/rustc"
      when: install_rust | bool
      tags:
        - rust

    # .NET installation
    - name: Install .NET SDK
      block:
        - name: Install .NET SDK
          ansible.builtin.apt:
            name: "dotnet-sdk-{{ dotnet_version }}"
            state: present
          become: yes
      when: install_dotnet | bool
      tags:
        - dotnet

    # VS Code extension setup
    - name: Ensure VS Code extensions are installed
      ansible.builtin.command:
        cmd: code --install-extension {{ item }}
      loop: "{{ vscode_extensions }}"
      register: vscode_ext_result
      changed_when: "'already installed' not in vscode_ext_result.stdout"
      loop_control:
        label: "Installing VS Code extension: {{ item }}"
      tags:
        - vscode
        - extensions

    # Git LFS setup
    - name: Ensure Git LFS is initialized
      ansible.builtin.command:
        cmd: git lfs install --system
      register: git_lfs_result
      changed_when: "'Already initialized' not in git_lfs_result.stdout"
      tags:
        - git
        - lfs

    # Git configuration
    - name: Configure Git user.name
      ansible.builtin.command:
        cmd: git config --global user.name "{{ git_user_name }}"
      register: git_name_result
      changed_when: git_name_result.rc == 0
      when: git_user_name is defined and git_user_name != ""
      tags:
        - git
        - config

    - name: Configure Git user.email
      ansible.builtin.command:
        cmd: git config --global user.email "{{ git_user_email }}"
      register: git_email_result
      changed_when: git_email_result.rc == 0
      when: git_user_email is defined and git_user_email != ""
      tags:
        - git
        - config

    # Git Credential Manager
    - name: Install Git Credential Manager
      block:
        - name: Download and install Git Credential Manager
          ansible.builtin.apt:
            deb: "https://github.com/git-ecosystem/git-credential-manager/releases/latest/download/gcm-linux_{{ deb_architecture }}.deb"
          become: yes

        - name: Configure Git to use Git Credential Manager
          ansible.builtin.command:
            cmd: git config --global credential.helper /usr/bin/git-credential-manager
          register: git_gcm_result
          changed_when: git_gcm_result.rc == 0
      when: install_git_credential_manager | bool
      tags:
        - git
        - git-credential-manager

    # bash-git-prompt
    - name: Install bash-git-prompt
      block:
        - name: Clone bash-git-prompt repository
          ansible.builtin.git:
            repo: https://github.com/magicmonty/bash-git-prompt.git
            dest: "{{ ansible_env.HOME }}/.bash-git-prompt"
            version: master

        - name: Add bash-git-prompt to .bashrc if not already present
          ansible.builtin.blockinfile:
            path: "{{ ansible_env.HOME }}/.bashrc"
            marker: "# {mark} BASH GIT PROMPT CONFIGURATION"
            block: |
              if [ -f "$HOME/.bash-git-prompt/gitprompt.sh" ]; then
                  GIT_PROMPT_ONLY_IN_REPO=1
                  source $HOME/.bash-git-prompt/gitprompt.sh
              fi
            state: present
      when: install_bash_git_prompt | bool
      tags:
        - git
        - bash-git-prompt

    # Custom user commands
    - name: Execute custom user commands
      ansible.builtin.shell: "{{ item.command }}"
      loop: "{{ custom_commands_user }}"
      loop_control:
        label: "Executing: {{ item.description }}"
      tags:
        - custom
        - user-commands

    # Custom elevated commands
    - name: Execute custom elevated commands
      ansible.builtin.shell: "{{ item.command }}"
      become: yes
      loop: "{{ custom_commands_elevated }}"
      loop_control:
        label: "Executing: {{ item.description }}"
      tags:
        - custom
        - elevated-commands

    # Check if custom script is defined and exists
    - name: Check if custom script exists
      ansible.builtin.stat:
        path: "{{ custom_script }}"
      register: custom_script_stat
      when: custom_script is defined and custom_script != ""
      tags:
        - custom
        - script

    # Make custom script executable
    - name: Make custom script executable
      ansible.builtin.file:
        path: "{{ custom_script }}"
        mode: '0755'
      when: custom_script is defined and custom_script != "" and custom_script_stat.stat.exists
      tags:
        - custom
        - script

    # Execute custom script
    - name: Execute custom script
      ansible.builtin.command:
        cmd: "{{ custom_script }}"
      when: custom_script is defined and custom_script != "" and custom_script_stat.stat.exists
      tags:
        - custom
        - script

    # Notify user of completion
    - name: Setup complete
      ansible.builtin.debug:
        msg: "Ubuntu development environment setup complete!"
      tags:
        - always
