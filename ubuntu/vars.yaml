# vars.yaml
# Externalized variables for Ansible setup

# System configuration
# Enable WSL-specific configurations if running in WSL
is_wsl: false  # Set to true if running in WSL

# APT prerequisite packages (installed first)
# These are essential packages needed for basic system operations and some specific applications
apt_packages_prereqs:
  # Basic networking and certificate tools
  - apt-transport-https
  - ca-certificates
  - curl
  - wget
  # PPA support
  - software-properties-common
  # For Docker Desktop
  - gnome-terminal
  # For Cursor
  - libfuse2

# External package repositories using deb822 format
# This uses the newer ansible.builtin.deb822_repository module
external_apt_repositories:
  # Add more repositories as needed
  # 1password only works on amd64 through apt, so we install it via tarball for ARM64 in custom_commands_elevated
  - name: 1password
    signed_by: https://downloads.1password.com/linux/keys/1password.asc
    uris: https://downloads.1password.com/linux/debian
    suites: stable
    components: main
    architectures: "{{ deb_architecture }}"
    supported_architectures:
      - amd64
  - name: docker
    signed_by: https://download.docker.com/linux/ubuntu/gpg
    uris: https://download.docker.com/linux/ubuntu
    suites: "{{ ansible_distribution_release }}"
    components: stable
    architectures: "{{ deb_architecture }}"
  - name: google-chrome
    signed_by: https://dl.google.com/linux/linux_signing_key.pub
    uris: https://dl.google.com/linux/chrome/deb
    suites: stable
    components: main
    architectures: "{{ deb_architecture }}"
  - name: microsoft
    signed_by: https://packages.microsoft.com/keys/microsoft.asc
    uris: "https://packages.microsoft.com/repos/microsoft-ubuntu-{{ ansible_distribution_release }}-prod"
    suites: "{{ ansible_distribution_release }}"
    components: main
    architectures: "{{ deb_architecture }}"
  - name: ngrok
    signed_by: https://ngrok-agent.s3.amazonaws.com/ngrok.asc
    uris: https://ngrok-agent.s3.amazonaws.com
    suites: buster
    components: main
    architectures: "{{ deb_architecture }}"
  - name: spotify
    signed_by: https://download.spotify.com/debian/pubkey_6224F9941A8AA6D1.gpg
    uris: http://repository.spotify.com
    suites: stable
    components: non-free
    architectures: "{{ deb_architecture }}"
    supported_architectures:
      - amd64
  - name: steam
    signed_by: https://repo.steampowered.com/steam/archive/stable/steam.gpg
    uris: https://repo.steampowered.com/steam
    suites: stable
    components: steam
    architectures: "{{ deb_architecture }}"
    supported_architectures:
      - amd64

# External package repositories
ppa_apt_repositories:
  # For dotnet-sdk-9.0 for Ubuntu 24.04
  # Not required on Ubuntu 24.10 and later
  - ppa:dotnet/backports
  # Add more PPA APT repositories as needed
  # Git PPA for latest Git version
  - ppa:git-core/ppa

# APT packages
apt_packages:
  # Development tools
  - build-essential
  - cmake
  - make
  - pkg-config
  - autoconf
  - automake
  - libtool
  - unzip
  # Python dependencies
  - libssl-dev
  - zlib1g-dev
  - libbz2-dev
  - libreadline-dev
  - libsqlite3-dev
  - llvm
  - libncurses5-dev
  - libncursesw5-dev
  - tk-dev
  - libffi-dev
  - liblzma-dev
  - python3-openssl
  - python3-pip
  - python3-venv
  # Git and version control
  - git
  - git-lfs
  # Shell tools
  - zsh
  - fish
  - bash-completion
  # Other tools
  - jq
  - maven
  - direnv
  # Add more packages as needed
  - dotnet-sdk-9.0
  - fonts-cascadia-code
  - google-chrome-stable
  - microsoft-edge-stable
  - ngrok
  - snapd
  # amd64 only, arm64 not supported
  - spotify-client
  # amd64 only, arm64 not supported
  - steam-launcher

# Snap packages
snap_packages:
  # Add more snap packages as needed
  # This is an alternative to APT for 1password, but it doesn't work on ARM64
  - name: 1password
    classic: true
  - name: code
    classic: true
  - name: drawio
    classic: true
  - name: azure-cli
    classic: true
  - name: slack
    classic: true
  # Azure Storage Explorer
  - name: storage-explorer
    classic: true
  # Add more snap packages as needed

# Debian packages
debian_packages:
  # Docker Desktop is AMD 64 only, uncomment and modify for your architecture if needed
  # - name: docker-desktop
  #   url: "https://desktop.docker.com/linux/main/{{ deb_architecture }}/docker-desktop-{{ deb_architecture }}.deb"
  - name: google-chrome
    url: "https://dl.google.com/linux/direct/google-chrome-stable_current_{{ deb_architecture }}.deb"

# Docker configuration
install_docker: true
docker_users:
  - "{{ ansible_user_id }}"

# PowerShell configuration
install_powershell: true

# PowerShell modules
powershell_modules:
  - AWS.Tools.Common
  - Az.Accounts
  - Microsoft.Graph.Authentication
  - Pester
  - platyPS
  - poetry
  - posh-git
  - powershell-yaml
  - PowerShellBuild
  - psake
  - PSGraphQL
  - PSJsonWebToken
  - PSReadLine
  - PSScriptAnalyzer
  - PSTcpIp
  - Terminal-Icons
  # Add more PowerShell modules as needed

# pipx modules
pipx_modules:
  - taskcat
  - azure-cli
  - awscli
  # Add more pipx modules as needed

# npm global packages
npm_global_packages:
  - aws-cdk
  - npmrc
  - '@vue/cli'

# .NET Global Tools
dotnet_tools:
  - Amazon.Lambda.Tools
  # This is the preferred way to install Git Credential Manager on Linux
  # since it can be updated via the dotnet cli.
  - git-credential-manager
  # This is the preferred way to install PowerShell on Linux for ARM64
  # since it can be updated via the dotnet cli.
  # Other chip architectures like x86/x64 can use the APT repository and Snap.
  # 32-bit ARM does not work on APT, but is in theory available via Snap.
  # dotnet tools is the only reliable way to install PowerShell
  # which works across all architectures, at the time of this writing.
  # Add dotnet tools to your PATH,
  # this will allow you to run `pwsh` from the terminal.
  - powershell
  # Add more .NET tools as needed

# VS Code extensions (same as macOS for consistency)
# You can list your VS Code extensions with the command:
# code --list-extensions
vscode_extensions:
  - 4ops.packer
  - alefragnani.project-manager
  - arjun.swagger-viewer
  - aws-scripting-guy.cform
  - charliermarsh.ruff
  - codezombiech.gitignore
  - davidanson.vscode-markdownlint
  - dbaeumer.vscode-eslint
  - docker.docker
  - donjayamanne.git-extension-pack
  - donjayamanne.githistory
  - eamodio.gitlens
  - esbenp.prettier-vscode
  - fernandoescolar.vscode-solution-explorer
  - github.copilot
  - github.copilot-chat
  - github.vscode-github-actions
  - github.vscode-pull-request-github
  - golang.go
  - grapecity.gc-excelviewer
  - hbenl.vscode-test-explorer
  - josin.kusto-syntax-highlighting
  - k--kato.docomment
  - medo64.render-crlf
  - mhutchie.git-graph
  - mimarec.swagger-doc-viewer
  - mohsen1.prettify-json
  - ms-azuretools.vscode-azurefunctions
  - ms-azuretools.vscode-azureresourcegroups
  - ms-azuretools.vscode-bicep
  - ms-azuretools.vscode-containers
  - ms-azuretools.vscode-docker
  - ms-dotnettools.csdevkit
  - ms-dotnettools.csharp
  - ms-dotnettools.vscode-dotnet-runtime
  - ms-kubernetes-tools.vscode-kubernetes-tools
  - ms-mssql.data-workspace-vscode
  - ms-mssql.mssql
  - ms-mssql.sql-bindings-vscode
  - ms-mssql.sql-database-projects-vscode
  - ms-python.debugpy
  - ms-python.isort
  - ms-python.python
  - ms-python.vscode-pylance
  - ms-toolsai.jupyter
  - ms-toolsai.jupyter-keymap
  - ms-toolsai.jupyter-renderers
  - ms-toolsai.vscode-jupyter-cell-tags
  - ms-toolsai.vscode-jupyter-slideshow
  - ms-vscode-remote.remote-containers
  - ms-vscode-remote.remote-ssh
  - ms-vscode-remote.remote-ssh-edit
  - ms-vscode-remote.remote-wsl
  - ms-vscode-remote.vscode-remote-extensionpack
  - ms-vscode.cmake-tools
  - ms-vscode.cpptools
  - ms-vscode.cpptools-extension-pack
  - ms-vscode.cpptools-themes
  - ms-vscode.hexeditor
  - ms-vscode.makefile-tools
  - ms-vscode.powershell
  - ms-vscode.remote-explorer
  - ms-vscode.remote-server
  - ms-vscode.test-adapter-converter
  - ms-vsliveshare.vsliveshare
  - msazurermtools.azurerm-vscode-tools
  - octref.vetur
  - oderwat.indent-rainbow
  - parallelsdesktop.parallels-desktop
  - pspester.pester-test
  - rangav.vscode-thunder-client
  - redhat.java
  - redhat.vscode-commons
  - redhat.vscode-yaml
  - samirat.csharp-test-adapter
  - sibiraj-s.vscode-scss-formatter
  - streetsidesoftware.code-spell-checker
  - takumii.markdowntable
  - teamsdevapp.ms-teams-vscode-extension
  - teamsdevapp.vscode-adaptive-cards
  - twxs.cmake
  - tylerleonhardt.vscode-inline-values-powershell
  - tyriar.sort-lines
  - usernamehw.errorlens
  - visualstudioexptteam.intellicode-api-usage-examples
  - visualstudioexptteam.vscodeintellicode
  - vscjava.vscode-gradle
  - vscjava.vscode-java-debug
  # Add more VS Code extensions as needed

# Node Version Manager (nvm) configuration
install_nvm: true
nvm_version: "0.39.7"  # Check for the latest version
node_version: "lts/*"  # Install latest LTS version

# Python version manager (pyenv) configuration
install_pyenv: true
pyenv_version: "2.4.0"  # Check for the latest version
python_versions:
  - "3.12.2"  # Check for the latest version
default_python_version: "3.12.2"

# Ruby version manager (rbenv) configuration
install_rbenv: true
ruby_version: "3.3.0"  # Check for the latest version

# Go installation
install_go: true
go_version: "1.22.2"  # Check for the latest version

# Rust installation
install_rust: true

# .NET SDK installation
install_dotnet: true
dotnet_version: "8.0"  # Check for the latest version

# Git configuration
git_user_email: ''  # REQUIRED: Set your email here or pass via command line with -e flag
git_user_name: "{{ ansible_user_id }}"  # Defaults to the current user's username

# Git Credential Manager configuration
install_git_credential_manager: true

# bash-git-prompt configuration
install_bash_git_prompt: true

# Custom commands and scripts (optional)
# These commands will be executed as the current user (non-elevated)
custom_commands_user:
  # Add commands to execute as the current user
  - command: "curl -sSO https://downloads.1password.com/linux/tar/stable/aarch64/1password-latest.tar.gz"
    description: "Download 1Password tarball"

# These commands will be executed with elevated privileges (sudo)
custom_commands_elevated:
  # Add commands to execute with elevated privileges
  # Steps to install 1Password on ARM64 Ubuntu (doesn't receive updates via apt yet)
  # https://support.1password.com/install-linux/#arm-or-other-distributions-targz
  - command: "tar -xf 1password-latest.tar.gz"
    description: "Extract 1Password tarball"
  - command: "mkdir -p /opt/1Password"
    description: "Create directory for 1Password"
  - command: "mv 1password-*/* /opt/1Password"
    description: "Move 1Password files to /opt/1Password"
  - command: "/opt/1Password/after-install.sh"
    description: "Run 1Password post-install script"
  - command: "rm -rf 1password-latest.tar.gz 1password-*"
    description: "Clean up 1Password installation files"
  # Connect Azure Storage Explorer to password manager service
  # See:
  # https://techcommunity.microsoft.com/blog/azurepaasblog/storage-explorer-how-to-install-storage-explorer-on-ubuntu-/4125878
  - command: "snap connect storage-explorer:password-manager-service :password-manager-service"
    description: "Connect Azure Storage Explorer to password manager service"

# Custom script path (optional)
# Provide the path to a custom script that will be executed at the end of the setup
custom_script: "./examples/custom_script.sh"
